// Code generated by MockGen. DO NOT EDIT.
// Source: twitter_repository.go
//
// Generated by this command:
//
//	mockgen -package mock -source twitter_repository.go -destination mock/twitter_repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "homeapi/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTwitterRepository is a mock of TwitterRepository interface.
type MockTwitterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTwitterRepositoryMockRecorder
}

// MockTwitterRepositoryMockRecorder is the mock recorder for MockTwitterRepository.
type MockTwitterRepositoryMockRecorder struct {
	mock *MockTwitterRepository
}

// NewMockTwitterRepository creates a new mock instance.
func NewMockTwitterRepository(ctrl *gomock.Controller) *MockTwitterRepository {
	mock := &MockTwitterRepository{ctrl: ctrl}
	mock.recorder = &MockTwitterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwitterRepository) EXPECT() *MockTwitterRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTwitterRepository) Get(ctx context.Context, ID int) (*domain.Twitter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(*domain.Twitter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTwitterRepositoryMockRecorder) Get(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTwitterRepository)(nil).Get), ctx, ID)
}

// Insert mocks base method.
func (m *MockTwitterRepository) Insert(ctx context.Context, twitter *domain.Twitter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, twitter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTwitterRepositoryMockRecorder) Insert(ctx, twitter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTwitterRepository)(nil).Insert), ctx, twitter)
}

// Last mocks base method.
func (m *MockTwitterRepository) Last(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockTwitterRepositoryMockRecorder) Last(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockTwitterRepository)(nil).Last), ctx)
}
