// Code generated by MockGen. DO NOT EDIT.
// Source: firestore_repository.go
//
// Generated by this command:
//
//	mockgen -package mock -source firestore_repository.go -destination mock/firestore_repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "homeapi/domain"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockFirestoreRepository is a mock of FirestoreRepository interface.
type MockFirestoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreRepositoryMockRecorder
}

// MockFirestoreRepositoryMockRecorder is the mock recorder for MockFirestoreRepository.
type MockFirestoreRepositoryMockRecorder struct {
	mock *MockFirestoreRepository
}

// NewMockFirestoreRepository creates a new mock instance.
func NewMockFirestoreRepository(ctrl *gomock.Controller) *MockFirestoreRepository {
	mock := &MockFirestoreRepository{ctrl: ctrl}
	mock.recorder = &MockFirestoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreRepository) EXPECT() *MockFirestoreRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockFirestoreRepository) Insert(ctx context.Context, client *firestore.Client, firestoreConnect *domain.FirestoreConnect) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, client, firestoreConnect)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockFirestoreRepositoryMockRecorder) Insert(ctx, client, firestoreConnect any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFirestoreRepository)(nil).Insert), ctx, client, firestoreConnect)
}

// List mocks base method.
func (m *MockFirestoreRepository) List(ctx context.Context, client *firestore.Client) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, client)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFirestoreRepositoryMockRecorder) List(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFirestoreRepository)(nil).List), ctx, client)
}
