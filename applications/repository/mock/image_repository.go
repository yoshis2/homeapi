// Code generated by MockGen. DO NOT EDIT.
// Source: image_repository.go
//
// Generated by this command:
//
//	mockgen -package mock -source image_repository.go -destination mock/image_repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "homeapi/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockImageRepository) Insert(ctx context.Context, image *domain.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockImageRepositoryMockRecorder) Insert(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockImageRepository)(nil).Insert), ctx, image)
}

// List mocks base method.
func (m *MockImageRepository) List(ctx context.Context) ([]domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockImageRepositoryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImageRepository)(nil).List), ctx)
}
