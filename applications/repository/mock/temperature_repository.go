// Code generated by MockGen. DO NOT EDIT.
// Source: ./temperature_repository.go

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	domain "homeapi/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockThermometerRepository is a mock of ThermometerRepository interface.
type MockThermometerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThermometerRepositoryMockRecorder
}

// MockThermometerRepositoryMockRecorder is the mock recorder for MockThermometerRepository.
type MockThermometerRepositoryMockRecorder struct {
	mock *MockThermometerRepository
}

// NewMockThermometerRepository creates a new mock instance.
func NewMockThermometerRepository(ctrl *gomock.Controller) *MockThermometerRepository {
	mock := &MockThermometerRepository{ctrl: ctrl}
	mock.recorder = &MockThermometerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThermometerRepository) EXPECT() *MockThermometerRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockThermometerRepository) Insert(ctx context.Context, temperature *domain.Temperature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, temperature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockThermometerRepositoryMockRecorder) Insert(ctx, temperature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockThermometerRepository)(nil).Insert), ctx, temperature)
}

// List mocks base method.
func (m *MockThermometerRepository) List(ctx context.Context) ([]domain.Temperature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Temperature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockThermometerRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockThermometerRepository)(nil).List), ctx)
}
